{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"SecOps360 Blog'a ho\u015fgeldiniz. Klasik anlamda bir blog ortam\u0131 olmamas\u0131 i\u00e7in DevOps ve SecOps altyap\u0131lar\u0131nda neler kulland\u0131\u011f\u0131m\u0131z\u0131 detayl\u0131 ve uygulayarak anlatmak i\u00e7in Read the Docs format\u0131nda yazmaya karar verdik. Blog'umuzda MicroService mimarilerinde kullan\u0131lan ara\u00e7lar ve bunlar\u0131n SecOps g\u00f6z\u00fcyle nas\u0131l kullan\u0131ld\u0131klar\u0131n\u0131 uygulamal\u0131 olarak anlat\u0131yoruz. \u0130lk yaz\u0131lar\u0131m\u0131zda MicroService d\u00fcnyas\u0131nda \u00e7ok\u00e7a kulland\u0131\u011f\u0131m\u0131z DevOps ara\u00e7lar\u0131ndan T\u00fcrk\u00e7e kaynak k\u0131s\u0131t\u0131 olan ara\u00e7lara \u00f6ncelik veriyoruz. Bu ama\u00e7la \u00f6ncelikle derinlemesine Prometheus'dan bahsediyor olaca\u011f\u0131z.","title":"SecOps360 Blog'a ho\u015fgeldiniz."},{"location":"#secops360-bloga-hosgeldiniz","text":"Klasik anlamda bir blog ortam\u0131 olmamas\u0131 i\u00e7in DevOps ve SecOps altyap\u0131lar\u0131nda neler kulland\u0131\u011f\u0131m\u0131z\u0131 detayl\u0131 ve uygulayarak anlatmak i\u00e7in Read the Docs format\u0131nda yazmaya karar verdik. Blog'umuzda MicroService mimarilerinde kullan\u0131lan ara\u00e7lar ve bunlar\u0131n SecOps g\u00f6z\u00fcyle nas\u0131l kullan\u0131ld\u0131klar\u0131n\u0131 uygulamal\u0131 olarak anlat\u0131yoruz. \u0130lk yaz\u0131lar\u0131m\u0131zda MicroService d\u00fcnyas\u0131nda \u00e7ok\u00e7a kulland\u0131\u011f\u0131m\u0131z DevOps ara\u00e7lar\u0131ndan T\u00fcrk\u00e7e kaynak k\u0131s\u0131t\u0131 olan ara\u00e7lara \u00f6ncelik veriyoruz. Bu ama\u00e7la \u00f6ncelikle derinlemesine Prometheus'dan bahsediyor olaca\u011f\u0131z.","title":"SecOps360 Blog'a ho\u015fgeldiniz."},{"location":"prometheus/prometheus-101/","text":"Giri\u015f Bu yaz\u0131da Prometheus'un ne oldu\u011funu a\u00e7\u0131klayarak, hangi dilde yaz\u0131ld\u0131\u011f\u0131n\u0131 ve hangi ihtiyac\u0131 kar\u015f\u0131lama amac\u0131 ile geli\u015ftirildi\u011fini, alternatif uygulamalara g\u00f6re avantajlar\u0131n\u0131 ele al\u0131p docker ortam\u0131nda prometheus kurulumu yap\u0131lacakt\u0131r. Sonraki ad\u0131mlarda ise Prometheus ekosistemine ait bile\u015fenleri ela al\u0131p bu sistem ile birlikte kullan\u0131lan zengin g\u00f6rsel yeteneklere sahip metrik analiz paketi olan Grafana ve Alert Managerden bahsedilecektir. Prometheus nedir ve hangi dilde yaz\u0131ld\u0131... Prometheus, Google 'in Bormon Monitoring uygulamas\u0131ndan esinlenerek, Go dilinde yaz\u0131lm\u0131\u015f pop\u00fcler A\u00e7\u0131k Kaynak Kodlu sistem izleme, uyar\u0131 ve zaman serili veritabana sahip yeni nesil Monitoring sistemidir . Prometheus Next-Generation Monitoring System, Open-Source, Time-Series Database, \u00d6zetle, 2012-2013 y\u0131llar\u0131nda SoundCluod firmas\u0131 Prometheus projesine ba\u015flad\u0131 ve 2015'in ba\u015flar\u0131nda halka a\u00e7\u0131ld\u0131. Prometheus'un Go dilinde yaz\u0131ld\u0131\u011f\u0131n\u0131 belirtmi\u015ftik. Do\u011fru bir ifade olmas\u0131 a\u00e7\u0131s\u0131ndan \u00e7o\u011fu bile\u015feni Go dilinde, baz\u0131 bile\u015fenleri ise Java, Pyhton ve Ruby'de yaz\u0131ld\u0131\u011f\u0131n\u0131 belirtmekte yarar var. Prometheus, Apache 2.0 Lisans\u0131 alt\u0131nda yay\u0131nlanm\u0131\u015ft\u0131r. \u015euan ba\u011f\u0131ms\u0131z Open-Soruce projesi olup \u00e7ok say\u0131da geli\u015ftiricisi ve kullan\u0131c\u0131 toplulu\u011fu bulunmaktad\u0131r. 2016 y\u0131l\u0131nda Cloud Native Computing Foundation kat\u0131ld\u0131. Prometheus neden ortaya \u00e7\u0131kt\u0131 ve kimler taraf\u0131ndan yaz\u0131ld\u0131... SoundCloud firmas\u0131 momolotic yap\u0131dan microservice mimarisine ge\u00e7i\u015f a\u015famalar\u0131nda mevcutta kulland\u0131klar\u0131 Monitoring uygulamalar\u0131 (StatsD ve Grafite...) yetersiz gelmeye ba\u015flam\u0131\u015f durumdayd\u0131. Firman\u0131n ihtiyaclar\u0131 belliydi ve bu ihtiya\u00e7lar \u00e7e\u015fitli sistemlerde mevcuttu. 2012-2013 y\u0131llar\u0131nda bu \u00f6zellikleri tek bir \u00fcr\u00fcnde toparlama karar\u0131 al\u0131n\u0131p Matt T. Proud ve Julius Volz taraf\u0131ndan projeye ba\u015flanm\u0131\u015ft\u0131r. B\u00f6ylece Her \u015feyi ve her katman\u0131, ayn\u0131 sistemle izleyebilen Prometheus do\u011fmu\u015ftur. Her katmandan kas\u0131t, network katman\u0131, fiziksel host katman\u0131, docker katman\u0131, uygulama katman\u0131 vs.. her bir seviye i\u00e7in hal\u0131 haz\u0131rda Prometheus'un exporter ad\u0131 verilen proplar\u0131 bulunmakta. Yeri gelince bu bile\u015fenlerden detayl\u0131 bir \u015fekilde bahsediyor olaca\u011f\u0131z. SoundCloud firmas\u0131 microservise mimarisine ge\u00e7i\u015fi esnas\u0131nda ihtiya\u00e7 duydu\u011fu \u00f6zelliker ise a\u015fa\u011f\u0131daki gibidir. A multi-dimensional data model. (\u00c7ok boyutlu veri modeli) Verinin ihtiyaca g\u00f6re ayr\u0131\u015fmas\u0131n\u0131n sa\u011flanmas\u0131. instance, service, endpoint, method vs. Operational simplicity. (Operasyonel basitlik) Yerel i\u015f istasyonlar\u0131 bile istenilen yer ve zamanda Monitoring sunucusuna kolayca cevrilebilme. Scalable data collection and decentralized architecture. (\u00d6l\u00e7eklenebilir veri toplama ve merkezi olmayan mimari) Farkl\u0131 ekipler ba\u011f\u0131ms\u0131z Monit\u00f6r sistemi kurabilir ve servisleri g\u00fcvenilir bir \u015fekilde izleyebilmeliler. A powerful query language. (G\u00fc\u00e7l\u00fc bir sorgulama dili.) Anlaml\u0131 uyar\u0131lar, grafikler ve sorgular olu\u015fturabilmek i\u00e7in \u00f6zel data modeli kullanmal\u0131. Neden Prometheus? A Monitoring and alerting system for distributed systems and infrastructure (Da\u011f\u0131t\u0131lm\u0131\u015f sistemler ve altyap\u0131 i\u00e7in bir izleme ve uyar\u0131 sistemidir) Highly scalable (Y\u00fcksek \u00f6l\u00e7eklenebilirlik) Highly available (Y\u00fcksek eri\u015febilirlik) Minimal external dependencies (Minimum d\u0131\u015f ba\u011f\u0131ml\u0131l\u0131klar) Easy deployment (Kolay da\u011f\u0131t\u0131m) Lots of existing integrations (\u00c7ok say\u0131da mevcut entegrasyon ) Extensive documentation (Kapsaml\u0131 dok\u00fcmantasyon) Commercial support available (Ticari destek mevcut) Designed with microservices and distributed architectures in mind (Mikro-Makro servis i\u00e7in uygun olmas\u0131) Not a long-term archival system (Uzun vMonitoringadeli ar\u015fiv sistemi de\u011fildir) Bussiness intelligence reporting system. (Raporlama arac\u0131 de\u011fildir) Not a data-mining backend. (Veri madencili\u011fi backend 'inde kullan\u0131lmaz) Prometheus'un Nagios, Sensu, Graphite, InfluxDB ve OpenTSDB ile detayl\u0131 kar\u015f\u0131la\u015ft\u0131malar\u0131n\u0131 bu likten inceleyebilirsiniz. Prometheus ekosisteminin bile\u015fenleri \" exporter \" lar. Her \u015feyi, her seviyedeki katman\u0131, ayn\u0131 sistem ile izlemeyi m\u00fcmk\u00fcn k\u0131lan yeni nesil Monitoring ekosistemi olan Prometheus i\u00e7in Official veya Third-party exporters bulunmakta. Bu exporter 'lar sayesinde elde edilen metrikler, HDD doluluk oran\u0131, swap kullan\u0131m\u0131, ping kayb\u0131, uygulamada ki hatalar veya benzeri istatiksel veriler istenir ise Alermanager yard\u0131m\u0131yla email, slack, PagerDuty, Generic Webhooks, OpsGenie, Pushover, HipChat gibi d\u0131\u015f servislere g\u00f6nderimi sa\u011flanabilir. Prometheus 'un ekosistem olarak ifade edilme sebebi u\u00e7tan uca tam bir Monit\u00f6r ve alert sistemi olup d\u0131\u015f servisler ile entegre olmas\u0131na ba\u011fl\u0131yabiliriz. Prometheus, monit\u00f6r edilmesi istenilen sunuculardaki, HTTP endpointlerinden kaz\u0131d\u0131klar\u0131 metrikleri toplar ve depolar. Bu \u00f6zelli\u011fi ile yani HTTP \u00fczerinden verilerin \u00e7ekilmesi Prometheus'a bir dizi avantajlar sa\u011flar ve di\u011fer Monitoring ve alerting sistemlerinden farkl\u0131 k\u0131lar. K\u0131sacas\u0131 monit\u00f6r edilen kaynaklardan verileri g\u00f6nderme ( push ) yerine, Prometheus monit\u00f6r edilen kaynaklardan verileri \u00e7eker ( pull ). Prometheus is pull-based Monitoring system... Bazen kaynaklardan veri \u00e7ekme yerine g\u00f6ndermemiz de gerekebilir. Bu durumlar i\u00e7in Prometheus'un PushGateway exporter 'dan yararlanabiliriz. \u0130leride PushGateway ve push metriklerinden detayl\u0131 bir \u015fekilde bahsedece\u011fiz. Monit\u00f6r everything, all levels, with the same system. Katman-Seviye Neyi Monit\u00f6r Eder veya Ni\u00e7in Kullan\u0131l\u0131r Kullan\u0131lan Exporter Network Router, switch, acces point, modem vs.. SNMP-Exporter Host, OS, Hardware OS, Donan\u0131m, kaynaklar\u0131 bilgileri.. cpu, ram, hdd Node-Exporter Uygulama Latency, errors, QPS, internal state PushGateway Container Kaynak kullan\u0131m\u0131 ve container performans de\u011ferleri cAdvisor Orchestration Cluster kaynaklar\u0131, scheduling Kubernetes components Exporter ile ilgili daha fazla bilgi ve detay i\u00e7in buray\u0131 t\u0131klay\u0131n. Prometheus kurulumu ve ayarlar\u0131. Promethe'us kurulumu \u00e7ok basit olmas\u0131na ra\u011fmen config dosyas\u0131n\u0131 do\u011fru \u015fekilde ayarlamal\u0131 ve amac\u0131m\u0131za hizmet etmesi sa\u011flamal\u0131y\u0131z. Prometheus'un ayar dosyas\u0131 yml uzant\u0131l\u0131 yani yaml dosya format\u0131ndadir. Docker ortam\u0131nda Prometheus aya\u011f\u0131 kald\u0131rd\u0131\u011f\u0131m\u0131zda varsay\u0131lan prometheus config dosyas\u0131 a\u015fa\u011f\u0131daki gibidir. Prometheus'un config yml dosyas\u0131n\u0131 kendimiz olu\u015fturup daha sonras\u0131nda bu dosyay\u0131 g\u00fcncelleyece\u011fimiz i\u00e7in docker ortam\u0131nda Volumes Bind-Mount \u00f6zelli\u011fini kullanca\u011f\u0131z. Prometheus varsay\u0131lan olarak 9090 portundan \u00e7al\u0131\u015f\u0131r ve 15 g\u00fcnl\u00fck datay\u0131 \u00fcst\u00fcnde tutar. Bu gibi ayarlar\u0131 de\u011fi\u015ftirmek i\u00e7in Prometheus sunucusunda \" ./prometheus -h \" komutunu kullanarak istenilen ayarlar\u0131 g\u00fcncelleyebiliriz. H\u0131zl\u0131 bir \u015fekilde container ortam\u0131nda prometheus'u aya\u011f\u0131 kald\u0131r\u0131p kurmak i\u00e7in komut: docker run -d --name prometheus -p 9090:9090 prom/prometheus Volumes bind-mount ile kal\u0131c\u0131 config dosyas\u0131 ile kurulum i\u00e7in komut: docker run -d --name prometheus -p 9090:9090 \\ -v /mnt/Monitoring/prometheus:/etc/prometheus \\ prom/prometheus --config.file=/etc/prometheus/prometheus.yml Kurulumu yapt\u0131ktan sonra http://ServerIp:9090/ \u015feklinde prometheus 'a giri\u015f yapabiliriz. Targets k\u0131sm\u0131nda ise Endpoint 'lermizin durumlar\u0131n\u0131 UP olarak g\u00f6rmemiz gerekiyor. Promethues'un YAML dosyas\u0131n\u0131 biraz daha incelemekte yarar var. A\u015fa\u011f\u0131daki config dosyas\u0131nda global , varsay\u0131lan ayarlar\u0131 belirlememizi sa\u011flar. scrape_interval , metrikleri kaz\u0131ma aral\u0131k s\u00fcresini, evaluation_interval ise hesaplama, de\u011fer aral\u0131k s\u00fcresini belirler. prometheus.yml # my global config global: scrape_interval: 15s # Set the scrape interval to every 15 seconds. Default is every 1 minute. evaluation_interval: 15s # Evaluate rules every 15 seconds. The default is every 1 minute. # scrape_timeout is set to the global default (10s). # Alertmanager configuration alerting: alertmanagers: - static_configs: - targets: # - alertmanager:9093 # Load rules once and periodically evaluate them according to the global 'evaluation_interval'. rule_files: # - first_rules.yml # - second_rules.yml # A scrape configuration containing exactly one endpoint to scrape: # Here it's Prometheus itself. scrape_configs: # The job name is added as a label `job= job_name ` to any timeseries scraped from this config. - job_name: 'prometheus' # metrics_path defaults to '/metrics' # scheme defaults to 'http'. static_configs: - targets: ['localhost:9090'] Konfigirasyon dosyas\u0131 olarak bu \u00f6rnekte sadece static_config kulland\u0131k. Bunun d\u0131\u015f\u0131ndaki configler ise a\u015fa\u011f\u0131da s\u0131ralanm\u0131\u015f ve k\u0131saca a\u00e7\u0131klanm\u0131\u015ft\u0131r. static_config : En yayg\u0131n kullan\u0131lan ayar parametrisidir. \u0130zlenecek sunucunun ip, port vs. bilgileri statik olacak girilir. tls_config : TLS ba\u011flant\u0131s\u0131 yapabilmemiz i\u00e7in gerekli bilgileri girmemizi sa\u011flayan parametredir. Transporter Layer Security yani iki bilgisayar aras\u0131nda ki ileti\u015fim g\u00fcvenli bir katman \u00fczerinden ger\u00e7ekle\u015fmesini sa\u011flayan protokold\u00fcr. file_sd_config : En yayg\u0131n kullan\u0131lan di\u011fer bir parametredir. Statik veya \"Service Discovery\" ile izlenecek hedefleri bulan bir mekanizmad\u0131r. JSON dosya uzant\u0131l\u0131 olmalad\u0131r. gce_sd_config : Google Cloud Platform \u00fczerindeki projemizin izleneme bilmesi ad\u0131na bilgi ve ayarlar\u0131n girilebilece\u011fi parametredir. ec2_sd_config : AWS EC2 'yi Monit\u00f6r hesab\u0131m\u0131z\u0131 izlemek i\u00e7in gerekli bilgilerin giribilece\u011fi parametredir. alertmanager_config : Monit\u00f6r etti\u011fimiz sistemlerden ald\u0131\u011f\u0131m\u0131z uyar\u0131lar\u0131 g\u00f6nderece\u011fimiz sistemlerin veya servislerin bilgilerini girebilmemiz i\u00e7in gerekli parametredir. Azure, Kubernetes, OpenStack ve Conlus gibi bir \u00e7ok hizmeti veya servisi Monit\u00f6r edebilmemiz i\u00e7in gerekli config parametresi bulunmaktad\u0131r. Detayl\u0131 bilgiye ise buradan ula\u015fabilirsiniz. kubernetes_sd_config openstack_sd_config azure_sd_config consul_sd_config dns_sd_config file_sd_config marathon_sd_config nerve_sd_config serverset_sd_config triton_sd_config relabel_config metric_relabel_configs alert_relabel_configs alertmanager_config remote_write remote_read scrape_config","title":"Prometheus 101"},{"location":"prometheus/prometheus-101/#giris","text":"Bu yaz\u0131da Prometheus'un ne oldu\u011funu a\u00e7\u0131klayarak, hangi dilde yaz\u0131ld\u0131\u011f\u0131n\u0131 ve hangi ihtiyac\u0131 kar\u015f\u0131lama amac\u0131 ile geli\u015ftirildi\u011fini, alternatif uygulamalara g\u00f6re avantajlar\u0131n\u0131 ele al\u0131p docker ortam\u0131nda prometheus kurulumu yap\u0131lacakt\u0131r. Sonraki ad\u0131mlarda ise Prometheus ekosistemine ait bile\u015fenleri ela al\u0131p bu sistem ile birlikte kullan\u0131lan zengin g\u00f6rsel yeteneklere sahip metrik analiz paketi olan Grafana ve Alert Managerden bahsedilecektir.","title":"Giri\u015f"},{"location":"prometheus/prometheus-101/#prometheus-nedir-ve-hangi-dilde-yazld","text":"Prometheus, Google 'in Bormon Monitoring uygulamas\u0131ndan esinlenerek, Go dilinde yaz\u0131lm\u0131\u015f pop\u00fcler A\u00e7\u0131k Kaynak Kodlu sistem izleme, uyar\u0131 ve zaman serili veritabana sahip yeni nesil Monitoring sistemidir . Prometheus Next-Generation Monitoring System, Open-Source, Time-Series Database, \u00d6zetle, 2012-2013 y\u0131llar\u0131nda SoundCluod firmas\u0131 Prometheus projesine ba\u015flad\u0131 ve 2015'in ba\u015flar\u0131nda halka a\u00e7\u0131ld\u0131. Prometheus'un Go dilinde yaz\u0131ld\u0131\u011f\u0131n\u0131 belirtmi\u015ftik. Do\u011fru bir ifade olmas\u0131 a\u00e7\u0131s\u0131ndan \u00e7o\u011fu bile\u015feni Go dilinde, baz\u0131 bile\u015fenleri ise Java, Pyhton ve Ruby'de yaz\u0131ld\u0131\u011f\u0131n\u0131 belirtmekte yarar var. Prometheus, Apache 2.0 Lisans\u0131 alt\u0131nda yay\u0131nlanm\u0131\u015ft\u0131r. \u015euan ba\u011f\u0131ms\u0131z Open-Soruce projesi olup \u00e7ok say\u0131da geli\u015ftiricisi ve kullan\u0131c\u0131 toplulu\u011fu bulunmaktad\u0131r. 2016 y\u0131l\u0131nda Cloud Native Computing Foundation kat\u0131ld\u0131.","title":"Prometheus nedir ve hangi dilde yaz\u0131ld\u0131..."},{"location":"prometheus/prometheus-101/#prometheus-neden-ortaya-ckt-ve-kimler-tarafndan-yazld","text":"SoundCloud firmas\u0131 momolotic yap\u0131dan microservice mimarisine ge\u00e7i\u015f a\u015famalar\u0131nda mevcutta kulland\u0131klar\u0131 Monitoring uygulamalar\u0131 (StatsD ve Grafite...) yetersiz gelmeye ba\u015flam\u0131\u015f durumdayd\u0131. Firman\u0131n ihtiyaclar\u0131 belliydi ve bu ihtiya\u00e7lar \u00e7e\u015fitli sistemlerde mevcuttu. 2012-2013 y\u0131llar\u0131nda bu \u00f6zellikleri tek bir \u00fcr\u00fcnde toparlama karar\u0131 al\u0131n\u0131p Matt T. Proud ve Julius Volz taraf\u0131ndan projeye ba\u015flanm\u0131\u015ft\u0131r. B\u00f6ylece Her \u015feyi ve her katman\u0131, ayn\u0131 sistemle izleyebilen Prometheus do\u011fmu\u015ftur. Her katmandan kas\u0131t, network katman\u0131, fiziksel host katman\u0131, docker katman\u0131, uygulama katman\u0131 vs.. her bir seviye i\u00e7in hal\u0131 haz\u0131rda Prometheus'un exporter ad\u0131 verilen proplar\u0131 bulunmakta. Yeri gelince bu bile\u015fenlerden detayl\u0131 bir \u015fekilde bahsediyor olaca\u011f\u0131z. SoundCloud firmas\u0131 microservise mimarisine ge\u00e7i\u015fi esnas\u0131nda ihtiya\u00e7 duydu\u011fu \u00f6zelliker ise a\u015fa\u011f\u0131daki gibidir. A multi-dimensional data model. (\u00c7ok boyutlu veri modeli) Verinin ihtiyaca g\u00f6re ayr\u0131\u015fmas\u0131n\u0131n sa\u011flanmas\u0131. instance, service, endpoint, method vs. Operational simplicity. (Operasyonel basitlik) Yerel i\u015f istasyonlar\u0131 bile istenilen yer ve zamanda Monitoring sunucusuna kolayca cevrilebilme. Scalable data collection and decentralized architecture. (\u00d6l\u00e7eklenebilir veri toplama ve merkezi olmayan mimari) Farkl\u0131 ekipler ba\u011f\u0131ms\u0131z Monit\u00f6r sistemi kurabilir ve servisleri g\u00fcvenilir bir \u015fekilde izleyebilmeliler. A powerful query language. (G\u00fc\u00e7l\u00fc bir sorgulama dili.) Anlaml\u0131 uyar\u0131lar, grafikler ve sorgular olu\u015fturabilmek i\u00e7in \u00f6zel data modeli kullanmal\u0131.","title":"Prometheus neden ortaya \u00e7\u0131kt\u0131 ve kimler taraf\u0131ndan yaz\u0131ld\u0131..."},{"location":"prometheus/prometheus-101/#neden-prometheus","text":"A Monitoring and alerting system for distributed systems and infrastructure (Da\u011f\u0131t\u0131lm\u0131\u015f sistemler ve altyap\u0131 i\u00e7in bir izleme ve uyar\u0131 sistemidir) Highly scalable (Y\u00fcksek \u00f6l\u00e7eklenebilirlik) Highly available (Y\u00fcksek eri\u015febilirlik) Minimal external dependencies (Minimum d\u0131\u015f ba\u011f\u0131ml\u0131l\u0131klar) Easy deployment (Kolay da\u011f\u0131t\u0131m) Lots of existing integrations (\u00c7ok say\u0131da mevcut entegrasyon ) Extensive documentation (Kapsaml\u0131 dok\u00fcmantasyon) Commercial support available (Ticari destek mevcut) Designed with microservices and distributed architectures in mind (Mikro-Makro servis i\u00e7in uygun olmas\u0131) Not a long-term archival system (Uzun vMonitoringadeli ar\u015fiv sistemi de\u011fildir) Bussiness intelligence reporting system. (Raporlama arac\u0131 de\u011fildir) Not a data-mining backend. (Veri madencili\u011fi backend 'inde kullan\u0131lmaz) Prometheus'un Nagios, Sensu, Graphite, InfluxDB ve OpenTSDB ile detayl\u0131 kar\u015f\u0131la\u015ft\u0131malar\u0131n\u0131 bu likten inceleyebilirsiniz.","title":"Neden Prometheus?"},{"location":"prometheus/prometheus-101/#prometheus-ekosisteminin-bilesenleri-exporter-lar","text":"Her \u015feyi, her seviyedeki katman\u0131, ayn\u0131 sistem ile izlemeyi m\u00fcmk\u00fcn k\u0131lan yeni nesil Monitoring ekosistemi olan Prometheus i\u00e7in Official veya Third-party exporters bulunmakta. Bu exporter 'lar sayesinde elde edilen metrikler, HDD doluluk oran\u0131, swap kullan\u0131m\u0131, ping kayb\u0131, uygulamada ki hatalar veya benzeri istatiksel veriler istenir ise Alermanager yard\u0131m\u0131yla email, slack, PagerDuty, Generic Webhooks, OpsGenie, Pushover, HipChat gibi d\u0131\u015f servislere g\u00f6nderimi sa\u011flanabilir. Prometheus 'un ekosistem olarak ifade edilme sebebi u\u00e7tan uca tam bir Monit\u00f6r ve alert sistemi olup d\u0131\u015f servisler ile entegre olmas\u0131na ba\u011fl\u0131yabiliriz. Prometheus, monit\u00f6r edilmesi istenilen sunuculardaki, HTTP endpointlerinden kaz\u0131d\u0131klar\u0131 metrikleri toplar ve depolar. Bu \u00f6zelli\u011fi ile yani HTTP \u00fczerinden verilerin \u00e7ekilmesi Prometheus'a bir dizi avantajlar sa\u011flar ve di\u011fer Monitoring ve alerting sistemlerinden farkl\u0131 k\u0131lar. K\u0131sacas\u0131 monit\u00f6r edilen kaynaklardan verileri g\u00f6nderme ( push ) yerine, Prometheus monit\u00f6r edilen kaynaklardan verileri \u00e7eker ( pull ). Prometheus is pull-based Monitoring system... Bazen kaynaklardan veri \u00e7ekme yerine g\u00f6ndermemiz de gerekebilir. Bu durumlar i\u00e7in Prometheus'un PushGateway exporter 'dan yararlanabiliriz. \u0130leride PushGateway ve push metriklerinden detayl\u0131 bir \u015fekilde bahsedece\u011fiz. Monit\u00f6r everything, all levels, with the same system. Katman-Seviye Neyi Monit\u00f6r Eder veya Ni\u00e7in Kullan\u0131l\u0131r Kullan\u0131lan Exporter Network Router, switch, acces point, modem vs.. SNMP-Exporter Host, OS, Hardware OS, Donan\u0131m, kaynaklar\u0131 bilgileri.. cpu, ram, hdd Node-Exporter Uygulama Latency, errors, QPS, internal state PushGateway Container Kaynak kullan\u0131m\u0131 ve container performans de\u011ferleri cAdvisor Orchestration Cluster kaynaklar\u0131, scheduling Kubernetes components Exporter ile ilgili daha fazla bilgi ve detay i\u00e7in buray\u0131 t\u0131klay\u0131n.","title":"Prometheus ekosisteminin bile\u015fenleri &amp; \"exporter\" lar."},{"location":"prometheus/prometheus-101/#prometheus-kurulumu-ve-ayarlar","text":"Promethe'us kurulumu \u00e7ok basit olmas\u0131na ra\u011fmen config dosyas\u0131n\u0131 do\u011fru \u015fekilde ayarlamal\u0131 ve amac\u0131m\u0131za hizmet etmesi sa\u011flamal\u0131y\u0131z. Prometheus'un ayar dosyas\u0131 yml uzant\u0131l\u0131 yani yaml dosya format\u0131ndadir. Docker ortam\u0131nda Prometheus aya\u011f\u0131 kald\u0131rd\u0131\u011f\u0131m\u0131zda varsay\u0131lan prometheus config dosyas\u0131 a\u015fa\u011f\u0131daki gibidir. Prometheus'un config yml dosyas\u0131n\u0131 kendimiz olu\u015fturup daha sonras\u0131nda bu dosyay\u0131 g\u00fcncelleyece\u011fimiz i\u00e7in docker ortam\u0131nda Volumes Bind-Mount \u00f6zelli\u011fini kullanca\u011f\u0131z. Prometheus varsay\u0131lan olarak 9090 portundan \u00e7al\u0131\u015f\u0131r ve 15 g\u00fcnl\u00fck datay\u0131 \u00fcst\u00fcnde tutar. Bu gibi ayarlar\u0131 de\u011fi\u015ftirmek i\u00e7in Prometheus sunucusunda \" ./prometheus -h \" komutunu kullanarak istenilen ayarlar\u0131 g\u00fcncelleyebiliriz. H\u0131zl\u0131 bir \u015fekilde container ortam\u0131nda prometheus'u aya\u011f\u0131 kald\u0131r\u0131p kurmak i\u00e7in komut: docker run -d --name prometheus -p 9090:9090 prom/prometheus Volumes bind-mount ile kal\u0131c\u0131 config dosyas\u0131 ile kurulum i\u00e7in komut: docker run -d --name prometheus -p 9090:9090 \\ -v /mnt/Monitoring/prometheus:/etc/prometheus \\ prom/prometheus --config.file=/etc/prometheus/prometheus.yml Kurulumu yapt\u0131ktan sonra http://ServerIp:9090/ \u015feklinde prometheus 'a giri\u015f yapabiliriz. Targets k\u0131sm\u0131nda ise Endpoint 'lermizin durumlar\u0131n\u0131 UP olarak g\u00f6rmemiz gerekiyor. Promethues'un YAML dosyas\u0131n\u0131 biraz daha incelemekte yarar var. A\u015fa\u011f\u0131daki config dosyas\u0131nda global , varsay\u0131lan ayarlar\u0131 belirlememizi sa\u011flar. scrape_interval , metrikleri kaz\u0131ma aral\u0131k s\u00fcresini, evaluation_interval ise hesaplama, de\u011fer aral\u0131k s\u00fcresini belirler. prometheus.yml # my global config global: scrape_interval: 15s # Set the scrape interval to every 15 seconds. Default is every 1 minute. evaluation_interval: 15s # Evaluate rules every 15 seconds. The default is every 1 minute. # scrape_timeout is set to the global default (10s). # Alertmanager configuration alerting: alertmanagers: - static_configs: - targets: # - alertmanager:9093 # Load rules once and periodically evaluate them according to the global 'evaluation_interval'. rule_files: # - first_rules.yml # - second_rules.yml # A scrape configuration containing exactly one endpoint to scrape: # Here it's Prometheus itself. scrape_configs: # The job name is added as a label `job= job_name ` to any timeseries scraped from this config. - job_name: 'prometheus' # metrics_path defaults to '/metrics' # scheme defaults to 'http'. static_configs: - targets: ['localhost:9090'] Konfigirasyon dosyas\u0131 olarak bu \u00f6rnekte sadece static_config kulland\u0131k. Bunun d\u0131\u015f\u0131ndaki configler ise a\u015fa\u011f\u0131da s\u0131ralanm\u0131\u015f ve k\u0131saca a\u00e7\u0131klanm\u0131\u015ft\u0131r. static_config : En yayg\u0131n kullan\u0131lan ayar parametrisidir. \u0130zlenecek sunucunun ip, port vs. bilgileri statik olacak girilir. tls_config : TLS ba\u011flant\u0131s\u0131 yapabilmemiz i\u00e7in gerekli bilgileri girmemizi sa\u011flayan parametredir. Transporter Layer Security yani iki bilgisayar aras\u0131nda ki ileti\u015fim g\u00fcvenli bir katman \u00fczerinden ger\u00e7ekle\u015fmesini sa\u011flayan protokold\u00fcr. file_sd_config : En yayg\u0131n kullan\u0131lan di\u011fer bir parametredir. Statik veya \"Service Discovery\" ile izlenecek hedefleri bulan bir mekanizmad\u0131r. JSON dosya uzant\u0131l\u0131 olmalad\u0131r. gce_sd_config : Google Cloud Platform \u00fczerindeki projemizin izleneme bilmesi ad\u0131na bilgi ve ayarlar\u0131n girilebilece\u011fi parametredir. ec2_sd_config : AWS EC2 'yi Monit\u00f6r hesab\u0131m\u0131z\u0131 izlemek i\u00e7in gerekli bilgilerin giribilece\u011fi parametredir. alertmanager_config : Monit\u00f6r etti\u011fimiz sistemlerden ald\u0131\u011f\u0131m\u0131z uyar\u0131lar\u0131 g\u00f6nderece\u011fimiz sistemlerin veya servislerin bilgilerini girebilmemiz i\u00e7in gerekli parametredir. Azure, Kubernetes, OpenStack ve Conlus gibi bir \u00e7ok hizmeti veya servisi Monit\u00f6r edebilmemiz i\u00e7in gerekli config parametresi bulunmaktad\u0131r. Detayl\u0131 bilgiye ise buradan ula\u015fabilirsiniz. kubernetes_sd_config openstack_sd_config azure_sd_config consul_sd_config dns_sd_config file_sd_config marathon_sd_config nerve_sd_config serverset_sd_config triton_sd_config relabel_config metric_relabel_configs alert_relabel_configs alertmanager_config remote_write remote_read scrape_config","title":"Prometheus kurulumu ve ayarlar\u0131."}]}